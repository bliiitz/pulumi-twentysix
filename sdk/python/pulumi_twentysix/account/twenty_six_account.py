# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TwentySixAccountArgs', 'TwentySixAccount']

@pulumi.input_type
class TwentySixAccountArgs:
    def __init__(__self__, *,
                 derivation_path: Optional[pulumi.Input[str]] = None,
                 mnemonic: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TwentySixAccount resource.
        """
        if derivation_path is not None:
            pulumi.set(__self__, "derivation_path", derivation_path)
        if mnemonic is not None:
            pulumi.set(__self__, "mnemonic", mnemonic)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter(name="derivationPath")
    def derivation_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "derivation_path")

    @derivation_path.setter
    def derivation_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "derivation_path", value)

    @property
    @pulumi.getter
    def mnemonic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mnemonic")

    @mnemonic.setter
    def mnemonic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mnemonic", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)


class TwentySixAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 derivation_path: Optional[pulumi.Input[str]] = None,
                 mnemonic: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a TwentySixAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TwentySixAccountArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TwentySixAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TwentySixAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TwentySixAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 derivation_path: Optional[pulumi.Input[str]] = None,
                 mnemonic: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TwentySixAccountArgs.__new__(TwentySixAccountArgs)

            __props__.__dict__["derivation_path"] = derivation_path
            __props__.__dict__["mnemonic"] = mnemonic
            __props__.__dict__["private_key"] = private_key
            __props__.__dict__["address"] = None
            __props__.__dict__["public_key"] = None
        super(TwentySixAccount, __self__).__init__(
            'twentysix:account:TwentySixAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'TwentySixAccount':
        """
        Get an existing TwentySixAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TwentySixAccountArgs.__new__(TwentySixAccountArgs)

        __props__.__dict__["address"] = None
        __props__.__dict__["derivation_path"] = None
        __props__.__dict__["mnemonic"] = None
        __props__.__dict__["private_key"] = None
        __props__.__dict__["public_key"] = None
        return TwentySixAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="derivationPath")
    def derivation_path(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "derivation_path")

    @property
    @pulumi.getter
    def mnemonic(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "mnemonic")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "public_key")

